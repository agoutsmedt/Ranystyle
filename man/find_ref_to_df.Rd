% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_ref_to_df.R
\name{find_ref_to_df}
\alias{find_ref_to_df}
\alias{parse_ref_to_df}
\title{Convert Found or Parsed References to Data Frames}
\usage{
find_ref_to_df(input = NULL, no_layout = FALSE, clean_ref = TRUE)

parse_ref_to_df(input = NULL, clean_ref = TRUE)
}
\arguments{
\item{input}{Vector of file paths to the documents to be analyzed (PDF for \code{\link[=find_ref_to_df]{find_ref_to_df()}}
and text for \code{\link[=parse_ref_to_df]{parse_ref_to_df()}}).}

\item{no_layout}{Logical; if TRUE, the '--no-layout' option is used in \code{\link[=find_ref_to_df]{find_ref_to_df()}},
which might be necessary for some PDFs (e.g., use this
if your document uses a multi-column layout). Ignored in \code{\link[=parse_ref_to_df]{parse_ref_to_df()}}. Default is FALSE.}

\item{clean_ref}{Logical; if TRUE, cleans the references using the \code{\link[=clean_ref]{clean_ref()}} function
after conversion (applicable to both functions). Default is TRUE. See \code{\link[=clean_ref]{clean_ref()}} for
details on what the function does.}
}
\value{
A tidy data frame with one row per reference, including metadata (author, title, etc...),
unique identifiers for each reference and document, and the complete original reference.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\details{
These functions convert references found in PDF documents or parsed from text files into tidy data frames.
\code{\link[=find_ref_to_df]{find_ref_to_df()}} utilizes the \code{\link[=find_ref]{find_ref()}} function for PDFs, and \code{\link[=parse_ref_to_df]{parse_ref_to_df()}} utilizes
the \code{\link[=parse_ref]{parse_ref()}} function for text files.

\code{\link[=find_ref_to_df]{find_ref_to_df()}} analyzes PDF documents and extracts all references, converting them into a
structured data frame.
It requires the 'anystyle' Ruby gem and uses both the 'find' and 'parse' features
(\code{\link[=find_ref]{find_ref()}} and \code{\link[=parse_ref]{parse_ref()}} respectively) to gather detailed information about each reference.

\code{\link[=parse_ref_to_df]{parse_ref_to_df()}} works similarly but is designed for text documents. It parses structured references
from text files and converts them into a data frame.

These functions Creates unique identifiers for each reference within a document and across the entire set of documents.
\itemize{
\item \code{id_doc}: A unique identifier for each document based on its position in the input.
\item \code{id_ref}: A unique identifier for each reference within its document. It's a combination of \code{id_doc} and
the reference's row number within the document, ensuring each reference across all documents has a unique ID.
}
}
\examples{
\dontrun{
# For a PDF document
references_df <- find_ref_to_df(input = c(
  "path/to/document1.pdf",
  "path/to/document2.pdf"
))

# For a text file
references_df <- parse_ref_to_df(input = "path/to/references.txt")
}

}
\seealso{
\code{\link[=find_ref]{find_ref()}}, \code{\link[=parse_ref]{parse_ref()}}, and \code{\link[=clean_ref]{clean_ref()}} for related functionality.
}
