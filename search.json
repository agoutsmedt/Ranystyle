[{"path":"https://agoutsmedt.github.io/Ranystyle/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Ranystyle authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/articles/using_Ranystyle.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using Ranystyle: Extracting, Parsing and Cleaning Bibliographic References","text":"Ranystyle R package designed automate extraction, parsing, cleaning bibliographic references PDF text documents. relies anystyle application.1 vignette provides comprehensive guide using Ranystyle’s functionalities, including extracting references PDFs, parsing references text files, cleaning organizing reference data.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/articles/using_Ranystyle.html","id":"initial-setup-installing-anystyle","dir":"Articles","previous_headings":"","what":"Initial Setup: installing anystyle","title":"Using Ranystyle: Extracting, Parsing and Cleaning Bibliographic References","text":"using functionalities extract parse references, need ensure anystyle Ruby gem installed system. install_anystyle() function simplifies installation necessary ‘anystyle’ components. Ensure Ruby environment properly configured gem can called command line. See details Ruby’s installation RubyGems .","code":"# Install anystyle install_anystyle()"},{"path":"https://agoutsmedt.github.io/Ranystyle/articles/using_Ranystyle.html","id":"extracting-references-from-pdfs-and-text-files","dir":"Articles","previous_headings":"","what":"Extracting References from PDFs and text files","title":"Using Ranystyle: Extracting, Parsing and Cleaning Bibliographic References","text":"find_ref() function used extract references PDF documents. utilizes ‘anystyle’ Ruby gem find function analyze document identify reference sections PDF. parse_ref() function, coming anystyle parse function, designed parse structured references text files vector character. reads text, applies parsing rules, converts references structured format. package incorporates various academic PDFs bibliographies, well bibliographies PDFs extracted .txt format, order manipulate different functions graph. can save parsed references various format: bib, json, xml ref (text document one reference per line). setting path = \"\" find_ref() parse_ref(), can directly extract results R, rather saving results. Let’s see example PDF.2 can parse reference .txt. parse_ref() can work directly vector character, one reference per line.","code":"# Path to the documents of the package pdf_path <- system.file(\"extdata\", package = \"Ranystyle\")  files <- list.files(pdf_path)  files #> [1] \"example_doc_1.pdf\" \"example_doc_1.txt\" \"example_doc_2.pdf\" \"example_doc_2.txt\" \"example_doc_3.pdf\" #> [6] \"example_doc_3.txt\" doc <- files[1] print(doc) #> [1] \"example_doc_1.pdf\" extracted_refs <- find_ref(input = paste0(pdf_path, \"/\", doc),                            path = \"\",                            output_format = \"bib\",                            no_layout = FALSE) #> [1] \"anystyle -f bib find C:/Users/goutsmedt/Documents/MEGAsync/Research/R/Packages/Ranystyle/inst/extdata/example_doc_1.pdf \"  # Print the extracted references cat(stringr::str_trunc(extracted_refs, 523)) #> @article{arnold2023a,  author = {Arnold, M.},  date = {2023},  title = {ECB must do more to tackle inflation “Monster”, says christine lagarde’},  journal = {Financial Times}}@article{barro1983a,  author = {Barro, R.J. and Gordon, D.B.},  date = {1983},  title = {Rules, discretion and reputation in a model of monetary policy’},  volume = {12},  pages = {101–121},  url = {https://doi.org/10.1016/0304-3932(83)90051-X.},  doi = {10.1016/0304-3932(83)90051-X.},  journal = {Journal of Monetary Economics},  number = {1}}... doc <- files[2] print(doc) #> [1] \"example_doc_1.txt\" extracted_refs <- parse_ref(input = paste0(pdf_path, \"/\", doc),                            path = \"\",                            output_format = \"xml\") #> [1] \"anystyle --no-overwrite -f xml parse C:/Users/goutsmedt/Documents/MEGAsync/Research/R/Packages/Ranystyle/inst/extdata/example_doc_1.txt \"  # Print the extracted references cat(stringr::str_trunc(extracted_refs, 615)) #> <?xml version=\"1.0\" encoding=\"UTF-8\"?><dataset>  <sequence>    <author>Arnold, M.<\/author>    <date>(2023).<\/date>    <title>ECB must do more to tackle inflation “Monster”, says christine lagarde’.<\/title>    <journal>Financial Times.<\/journal>  <\/sequence>  <sequence>    <author>Barro, R. J., &amp; Gordon, D. B.<\/author>    <date>(1983).<\/date>    <title>Rules, discretion and reputation in a model of monetary policy’.<\/title>    <journal>Journal of Monetary Economics,<\/journal>    <volume>12(1),<\/volume>    <pages>101–121.<\/pages>    <url>https://doi.org/10.1016/0304-3932(83)90051-X.<\/url>  <\/sequence>  ... # a set of false references references <- c(   \"Smith, J. (2020). Understanding Artificial Intelligence. AI Journal, 35(5), 123-145.\",   \"Johnson, L., and Brown, C. (2018). Advances in Machine Learning. New York: Academic Press.\",   \"Clark, E., & Wright, R. (2019). Robotics and Automation. London: Springer, 200-250.\",   \"Davis, M. 2021. Quantum Computing: A New Era. Quantum Computing, 5(3):300-320.\",   \"Adams, James, and Murphy, Finn. (2022). Exploring Virtual Reality. VR World, 10(7), 777-800.\" )  extracted_refs <- parse_ref(input = references,                            path = \"\",                            output_format = \"json\") #> [1] \"anystyle --no-overwrite -f json parse ref_to_parse.txt \"  # Print the extracted references cat(stringr::str_trunc(extracted_refs, 640)) #> [  {    \"author\": [      {        \"family\": \"Smith\",        \"given\": \"J.\"      }    ],    \"date\": [      \"2020\"    ],    \"title\": [      \"Understanding Artificial Intelligence\"    ],    \"volume\": [      \"35\"    ],    \"pages\": [      \"123–145\"    ],    \"type\": \"article-journal\",    \"container-title\": [      \"AI Journal\"    ],    \"issue\": [      \"5\"    ]  },  {    \"author\": [      {        \"family\": \"Johnson\",        \"given\": \"L.\"      },      {        \"family\": \"Brown\",        \"given\": \"C.\"      }    ],    \"date\": [      \"2018\"    ],    \"title\": [      \"Advances in Machine Learning\"    ],    \"location\": [      \"New York\"    ],    ..."},{"path":"https://agoutsmedt.github.io/Ranystyle/articles/using_Ranystyle.html","id":"from-reference-to-data-frame","dir":"Articles","previous_headings":"","what":"From Reference to Data Frame","title":"Using Ranystyle: Extracting, Parsing and Cleaning Bibliographic References","text":"Depending whether start PDFs .txt. vectors, can use two functions: find_ref_to_df() parse_ref_to_df(). functions create data frame (tibble precisely) gathering various information references extracted. find_ref_to_df() parse_ref_to_df() can also take multiple PDF .txt documents create data frame . may seen, anystyle runs twice per document: second time serve extract references .ref format, used keep whole reference column table. useful cleaning data later. data extracted still bit messy. columns list format, sometimes two element per reference (like two dates, two titles). clean_ref() function implements different cleaning processes: collapses non-essential columns (.e. date title), combining multiple entries single text string. reorganizes author information, creating full name given, particle, family components. Also add author_order column. column remain list format. separates cleans dates titles, organizing primary additional information. first date first title save date title. dates titles saved other_date other_title. extracts year date places separate column. removes extraneous punctuation trims whitespace character columns. relocates key columns standardized order easier analysis readability. cleaning steps directly implemented find_ref_to_df() parse_ref_to_df(): just need set clean_ref TRUE.","code":"doc <- files[1] print(doc) #> [1] \"example_doc_1.pdf\" data_ref <- find_ref_to_df(input = paste0(pdf_path, \"/\", doc),                            no_layout = FALSE) #> [1] \"anystyle -f json find C:/Users/goutsmedt/Documents/MEGAsync/Research/R/Packages/Ranystyle/inst/extdata/example_doc_1.pdf \" #> [1] \"anystyle --overwrite -f ref find C:/Users/goutsmedt/Documents/MEGAsync/Research/R/Packages/Ranystyle/inst/extdata/example_doc_1.pdf ./\"  print(data_ref) #> # A tibble: 81 × 23 #>    id_doc doc        id_ref author   title  year `container-title` volume pages location publisher type  date  other_date #>     <int> <chr>      <chr>  <list>   <chr> <int> <chr>             <chr>  <chr> <chr>    <chr>     <chr> <chr> <chr>      #>  1      1 example_d… 1_1    <tibble> ECB …  2023 Financial Times   <NA>   <NA>  <NA>     <NA>      arti… 2023  <NA>       #>  2      1 example_d… 1_2    <tibble> Rule…  1983 Journal of Monet… 12     101–… <NA>     <NA>      arti… 1983  <NA>       #>  3      1 example_d… 1_3    <tibble> Idea…  2009 Journal of Europ… 16     701–… <NA>     <NA>      arti… 2009  <NA>       #>  4      1 example_d… 1_4    <tibble> A st…  1999 Scottish Journal… 46     17–39 <NA>     <NA>      arti… 1999  <NA>       #>  5      1 example_d… 1_5    <tibble> Tech…  2018 International Po… 12     328–… <NA>     <NA>      arti… 2018  <NA>       #>  6      1 example_d… 1_6    <tibble> Late…  2003 Journal of Machi… 3      <NA>  <NA>     <NA>      arti… 2003  <NA>       #>  7      1 example_d… 1_7    <tibble> Plan…  2022 Zeitschrift Für … 32     707–… <NA>     <NA>      arti… 2022  <NA>       #>  8      1 example_d… 1_8    <tibble> Repu…  2010 <NA>              <NA>   <NA>  <NA>     Princeto… book  2010  <NA>       #>  9      1 example_d… 1_9    <tibble> The …  2016 At the Macroecon… <NA>   <NA>  <NA>     <NA>      pape… 2016  <NA>       #> 10      1 example_d… 1_10   <tibble> Effe…  2017 At the EUROFI Co… <NA>   <NA>  <NA>     <NA>      pape… 2017  <NA>       #> # ℹ 71 more rows #> # ℹ 9 more variables: other_title <chr>, url <chr>, issue <chr>, doi <chr>, edition <chr>, genre <chr>, note <chr>, #> #   editor <chr>, full_ref <chr> pdfs <- files %>%    .[stringr::str_detect(., \"\\\\.pdf$\")] data_ref <- find_ref_to_df(input = paste0(pdf_path, \"/\", pdfs),                            clean_ref = FALSE,                            no_layout = FALSE) #> [1] \"anystyle -f json find C:/Users/goutsmedt/Documents/MEGAsync/Research/R/Packages/Ranystyle/inst/extdata/example_doc_1.pdf \" #> [1] \"anystyle -f json find C:/Users/goutsmedt/Documents/MEGAsync/Research/R/Packages/Ranystyle/inst/extdata/example_doc_2.pdf \" #> [1] \"anystyle -f json find C:/Users/goutsmedt/Documents/MEGAsync/Research/R/Packages/Ranystyle/inst/extdata/example_doc_3.pdf \" #> [1] \"anystyle --overwrite -f ref find C:/Users/goutsmedt/Documents/MEGAsync/Research/R/Packages/Ranystyle/inst/extdata/example_doc_1.pdf ./\" #> [1] \"anystyle --overwrite -f ref find C:/Users/goutsmedt/Documents/MEGAsync/Research/R/Packages/Ranystyle/inst/extdata/example_doc_2.pdf ./\" #> [1] \"anystyle --overwrite -f ref find C:/Users/goutsmedt/Documents/MEGAsync/Research/R/Packages/Ranystyle/inst/extdata/example_doc_3.pdf ./\"  data_ref #> # A tibble: 266 × 21 #>    id_doc doc      id_ref author date  title type  `container-title` volume pages  url    issue  doi   publisher location #>     <int> <chr>    <chr>  <list> <lis> <lis> <chr> <list>            <list> <list> <list> <list> <chr> <chr>     <chr>    #>  1      1 example… 1_1    <df>   <chr> <chr> arti… <chr [1]>         <NULL> <NULL> <NULL> <NULL> <NA>  <NA>      <NA>     #>  2      1 example… 1_2    <df>   <chr> <chr> arti… <chr [1]>         <chr>  <chr>  <chr>  <chr>  10.1… <NA>      <NA>     #>  3      1 example… 1_3    <df>   <chr> <chr> arti… <chr [1]>         <chr>  <chr>  <NULL> <chr>  <NA>  <NA>      <NA>     #>  4      1 example… 1_4    <df>   <chr> <chr> arti… <chr [1]>         <chr>  <chr>  <NULL> <chr>  <NA>  <NA>      <NA>     #>  5      1 example… 1_5    <df>   <chr> <chr> arti… <chr [1]>         <chr>  <chr>  <NULL> <chr>  <NA>  <NA>      <NA>     #>  6      1 example… 1_6    <df>   <chr> <chr> arti… <chr [1]>         <chr>  <NULL> <NULL> <NULL> <NA>  <NA>      <NA>     #>  7      1 example… 1_7    <df>   <chr> <chr> arti… <chr [1]>         <chr>  <chr>  <chr>  <chr>  10.1… <NA>      <NA>     #>  8      1 example… 1_8    <df>   <chr> <chr> book  <NULL>            <NULL> <NULL> <NULL> <NULL> <NA>  Princeto… <NA>     #>  9      1 example… 1_9    <df>   <chr> <chr> pape… <chr [1]>         <NULL> <NULL> <chr>  <NULL> <NA>  <NA>      <NA>     #> 10      1 example… 1_10   <df>   <chr> <chr> pape… <chr [1]>         <NULL> <NULL> <chr>  <NULL> <NA>  <NA>      <NA>     #> # ℹ 256 more rows #> # ℹ 6 more variables: edition <chr>, genre <chr>, note <chr>, editor <list>, `collection-title` <chr>, full_ref <chr> data_ref %>%    dplyr::select(id_ref, full_ref) #> # A tibble: 266 × 2 #>    id_ref full_ref                                                                                                        #>    <chr>  <chr>                                                                                                           #>  1 1_1    Arnold, M. (2023). ECB must do more to tackle inflation “Monster”, says christine lagarde’. Financial Times.    #>  2 1_2    Barro, R. J., & Gordon, D. B. (1983). Rules, discretion and reputation in a model of monetary policy’. Journal… #>  3 1_3    Béland, D. (2009). Ideas, institutions, and policy change’. Journal of European Public Policy, 16(5), 701–718.  #>  4 1_4    Berger, H., & Haan, J. (1999). A state within the state? An event study on the bundesbank (1948–1973)’. Scotti… #>  5 1_5    Best, J. (2018). Technocratic exceptionalism: Monetary policy and the fear of democracy’. International Politi… #>  6 1_6    Blei, D. M., Ng, A. Y., & Jordan, M. I. (2003). Latent Dirichlet Allocation’. Journal of Machine Learning Rese… #>  7 1_7    Braun, B., Carlo, D., & Diessner, S. (2022). Planning Laissez-Faire: Supranational Central Banking and Structu… #>  8 1_8    Carpenter, D. P. (2010). Reputation and power: Organizational image and pharmaceutical regulation at the FDA. … #>  9 1_9    Constâncio, V. (2016). The challenge of low real interest rates for monetary policy’. At the Macroeconomics Sy… #> 10 1_10   Constâncio, V. (2017). Effectiveness of monetary union and the capital markets union’. At the EUROFI Conferenc… #> # ℹ 256 more rows data_ref <- clean_ref(data_ref)   data_ref #> # A tibble: 266 × 24 #>    id_doc doc        id_ref author   title  year `container-title` volume pages location publisher type  date  other_date #>     <int> <chr>      <chr>  <list>   <chr> <int> <chr>             <chr>  <chr> <chr>    <chr>     <chr> <chr> <chr>      #>  1      1 example_d… 1_1    <tibble> ECB …  2023 Financial Times   <NA>   <NA>  <NA>     <NA>      arti… 2023  <NA>       #>  2      1 example_d… 1_2    <tibble> Rule…  1983 Journal of Monet… 12     101–… <NA>     <NA>      arti… 1983  <NA>       #>  3      1 example_d… 1_3    <tibble> Idea…  2009 Journal of Europ… 16     701–… <NA>     <NA>      arti… 2009  <NA>       #>  4      1 example_d… 1_4    <tibble> A st…  1999 Scottish Journal… 46     17–39 <NA>     <NA>      arti… 1999  <NA>       #>  5      1 example_d… 1_5    <tibble> Tech…  2018 International Po… 12     328–… <NA>     <NA>      arti… 2018  <NA>       #>  6      1 example_d… 1_6    <tibble> Late…  2003 Journal of Machi… 3      <NA>  <NA>     <NA>      arti… 2003  <NA>       #>  7      1 example_d… 1_7    <tibble> Plan…  2022 Zeitschrift Für … 32     707–… <NA>     <NA>      arti… 2022  <NA>       #>  8      1 example_d… 1_8    <tibble> Repu…  2010 <NA>              <NA>   <NA>  <NA>     Princeto… book  2010  <NA>       #>  9      1 example_d… 1_9    <tibble> The …  2016 At the Macroecon… <NA>   <NA>  <NA>     <NA>      pape… 2016  <NA>       #> 10      1 example_d… 1_10   <tibble> Effe…  2017 At the EUROFI Co… <NA>   <NA>  <NA>     <NA>      pape… 2017  <NA>       #> # ℹ 256 more rows #> # ℹ 10 more variables: other_title <chr>, url <chr>, issue <chr>, doi <chr>, edition <chr>, genre <chr>, note <chr>, #> #   editor <chr>, `collection-title` <chr>, full_ref <chr>"},{"path":"https://agoutsmedt.github.io/Ranystyle/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aurélien Goutsmedt. Maintainer, author.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goutsmedt, Aurélien, (2023). Ranystyle: Automated Bibliographic Reference Parsing Cleaning. R package version 0.0.999. https://github.com/agoutsmedt/Ranystyle","code":"@Manual{,   title = {Ranystyle: Automated Bibliographic Reference Parsing and Cleaning},   author = {Aurélien Goutsmedt},   year = {2024},   note = {R package version 0.0.999},   url = {https://github.com/agoutsmedt/Ranystyle}, }"},{"path":"https://agoutsmedt.github.io/Ranystyle/index.html","id":"ranystyle","dir":"","previous_headings":"","what":"Automated Bibliographic Reference Parsing and Cleaning","title":"Automated Bibliographic Reference Parsing and Cleaning","text":"Ranystyle R package designed automate extraction, parsing, cleaning bibliographic references PDF text documents. Utilizing power ‘anystyle’ Ruby gem, segments references converts structured formats suitable analysis use. can cite package :","code":"citation(\"Ranystyle\") #> To cite biblionetwork in publications use: #>  #>   Goutsmedt, Aurélien, (2023). Ranystyle: Automated Bibliographic #>   Reference Parsing and Cleaning. R package version 0.0.999. #>   https://github.com/agoutsmedt/Ranystyle #>  #> Une entrée BibTeX pour les utilisateurs LaTeX est #>  #>   @Manual{, #>     title = {Ranystyle: Automated Bibliographic Reference Parsing and Cleaning}, #>     author = {Aurélien Goutsmedt}, #>     year = {2024}, #>     note = {R package version 0.0.999}, #>     url = {https://github.com/agoutsmedt/Ranystyle}, #>   } #>  #> As Ranystyle is continually evolving, you may want to cite its version #> number. Find it with 'help(package=Ranystyle)'."},{"path":"https://agoutsmedt.github.io/Ranystyle/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automated Bibliographic Reference Parsing and Cleaning","text":"can install development version Ranystyle GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"agoutsmedt/Ranystyle\")"},{"path":"https://agoutsmedt.github.io/Ranystyle/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Automated Bibliographic Reference Parsing and Cleaning","text":"’s basic example might use Ranystyle parse clean references PDF document:","code":"library(Ranystyle) # Path to your PDF document pdf_path <- system.file(\"extdata\", package = \"Ranystyle\")  files <- list.files(pdf_path)  # Extract references from the PDF extracted_refs <- find_ref_to_df(input = paste0(pdf_path, \"/\", files[1])) #> [1] \"anystyle -f json find C:/Users/goutsmedt/AppData/Local/Temp/RtmpEtApZg/temp_libpath489842e7298e/Ranystyle/extdata/example_doc_1.pdf \" #> [1] \"anystyle --overwrite -f ref find C:/Users/goutsmedt/AppData/Local/Temp/RtmpEtApZg/temp_libpath489842e7298e/Ranystyle/extdata/example_doc_1.pdf ./\"  # Print the extracted references print(extracted_refs) #> # A tibble: 81 × 23 #>    id_doc doc         id_ref author   title  year `container-title` volume pages #>     <int> <chr>       <chr>  <list>   <chr> <int> <chr>             <chr>  <chr> #>  1      1 example_do… 1_1    <tibble> ECB …  2023 Financial Times   <NA>   <NA>  #>  2      1 example_do… 1_2    <tibble> Rule…  1983 Journal of Monet… 12     101–… #>  3      1 example_do… 1_3    <tibble> Idea…  2009 Journal of Europ… 16     701–… #>  4      1 example_do… 1_4    <tibble> A st…  1999 Scottish Journal… 46     17–39 #>  5      1 example_do… 1_5    <tibble> Tech…  2018 International Po… 12     328–… #>  6      1 example_do… 1_6    <tibble> Late…  2003 Journal of Machi… 3      <NA>  #>  7      1 example_do… 1_7    <tibble> Plan…  2022 Zeitschrift Für … 32     707–… #>  8      1 example_do… 1_8    <tibble> Repu…  2010 <NA>              <NA>   <NA>  #>  9      1 example_do… 1_9    <tibble> The …  2016 At the Macroecon… <NA>   <NA>  #> 10      1 example_do… 1_10   <tibble> Effe…  2017 At the EUROFI Co… <NA>   <NA>  #> # ℹ 71 more rows #> # ℹ 14 more variables: location <chr>, publisher <chr>, type <chr>, date <chr>, #> #   other_date <chr>, other_title <chr>, url <chr>, issue <chr>, doi <chr>, #> #   edition <chr>, genre <chr>, note <chr>, editor <chr>, full_ref <chr>"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/Ranystyle-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Ranystyle: Automated Bibliographic Reference Parsing and Cleaning — Ranystyle-package","title":"Ranystyle: Automated Bibliographic Reference Parsing and Cleaning — Ranystyle-package","text":"Provides tools automated extraction, parsing, cleaning bibliographic references PDF text documents. Utilizing 'anystyle' Ruby gem, segments references converts structured formats. package offers functions reorganize clean data, making easier analyze use bibliographic information. handles various input output formats provides utilities detailed reference management.","code":""},{"path":[]},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/Ranystyle-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ranystyle: Automated Bibliographic Reference Parsing and Cleaning — Ranystyle-package","text":"Maintainer: Aurélien Goutsmedt aurelien.goutsmedt@uclouvain.(ORCID)","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/build_data_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Data Reference Frame — build_data_ref","title":"Build Data Reference Frame — build_data_ref","text":"function converts results find_ref() parse_ref() tidy data frame. handles JSON structures unnests possible create comprehensive reference data frame.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/build_data_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Data Reference Frame — build_data_ref","text":"","code":"build_data_ref(data, input = input)"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/build_data_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Data Reference Frame — build_data_ref","text":"data raw data find_ref() parse_ref().","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/build_data_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Data Reference Frame — build_data_ref","text":"tidy data frame one row per reference additional details.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/build_data_ref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Data Reference Frame — build_data_ref","text":"Internally used find_ref_to_df() parse_ref_to_df(), function processes raw JSON text data structured data frame. uses safely_unnest handle nested lists within data.","code":""},{"path":[]},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/clean_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and Organize Reference Data — clean_ref","text":"","code":"clean_ref(data)"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/clean_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and Organize Reference Data — clean_ref","text":"data data frame references cleaned, produced find_ref_to_df() parse_ref_to_df().","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/clean_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and Organize Reference Data — clean_ref","text":"cleaned reorganized data frame one row per reference additional details.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/clean_ref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean and Organize Reference Data — clean_ref","text":"function tidies data frame references obtained find_ref_to_df() parse_ref_to_df(). performs various cleaning reorganization tasks present data structured readable format. function performs following steps: Collapses non-essential columns (.e. date title), combining multiple entries single text string. Reorganizes author information, creating full name given, particle, family components. Also add author_order column. column remain list format. Separates cleans dates titles, organizing primary additional information. first date first title save date title. dates titles saved other_date other_title. Extracts year date places separate column. Removes extraneous punctuation trims whitespace character columns. Relocates key columns standardized order easier analysis readability. function can used directly, indirectly find_ref_to_df() parse_ref_to_df() setting clean_ref parameter TRUE.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/collapse_non_essential_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse Non-Essential Columns (Internal) — collapse_non_essential_columns","title":"Collapse Non-Essential Columns (Internal) — collapse_non_essential_columns","text":"Collapses non-essential columns reference data frame, converting lists multiple entries single text strings. used preliminary step cleaning organizing data.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/collapse_non_essential_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse Non-Essential Columns (Internal) — collapse_non_essential_columns","text":"","code":"collapse_non_essential_columns(data)"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/collapse_non_essential_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse Non-Essential Columns (Internal) — collapse_non_essential_columns","text":"data data frame references potential list columns.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/collapse_non_essential_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse Non-Essential Columns (Internal) — collapse_non_essential_columns","text":"data frame non-essential information collapsed.","code":""},{"path":[]},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/find_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Bibliographic References in Documents Using Anystyle — find_ref","text":"","code":"find_ref(   input = NULL,   path = NULL,   output_format = c(\"ref\", \"xml\", \"bib\", \"json\"),   no_layout = FALSE,   overwrite = FALSE )"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/find_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Bibliographic References in Documents Using Anystyle — find_ref","text":"input Vector file paths PDF documents analyzed. path path parsed file(s) saved. NULL, files saved current working directory. empty, parsed data returned directly saved. output_format Desired output format, one \"ref\", \"xml\", \"bib\", \"json\". \"ref\" text file one reference per line. Default \"json\". no_layout Logical; TRUE, anystyle '---layout' option used (e.g., use document uses multi-column layout). Default FALSE. overwrite Logical; TRUE, existing files output location overwritten. Default FALSE.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/find_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Bibliographic References in Documents Using Anystyle — find_ref","text":"path empty, returns list (single element one input) containing extracted references specified format. path specified, parsed files saved location function returns NULL.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/find_ref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Bibliographic References in Documents Using Anystyle — find_ref","text":"function utilizes anystyle Ruby gem analyze PDF text documents extract references finds. input can single multiple PDF documents,","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/find_ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Bibliographic References in Documents Using Anystyle — find_ref","text":"","code":"if (FALSE) { # Find references in a single PDF and return as JSON find_ref(   input = \"path/to/document.pdf\",   output_format = \"json\" )  # Find references from a folder of documents and save as XML find_ref(   input = \"path/to/documents/\", path = \"path/to/output\",   output_format = \"xml\" ) }"},{"path":[]},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/find_ref_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Found or Parsed References to Data Frames — find_ref_to_df","text":"","code":"find_ref_to_df(input = NULL, no_layout = FALSE, clean_ref = TRUE)  parse_ref_to_df(input = NULL, clean_ref = TRUE)"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/find_ref_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Found or Parsed References to Data Frames — find_ref_to_df","text":"input Vector file paths documents analyzed (PDF find_ref_to_df() text parse_ref_to_df()). no_layout Logical; TRUE, '---layout' option used find_ref_to_df(), might necessary PDFs (e.g., use document uses multi-column layout). Ignored parse_ref_to_df(). Default FALSE. clean_ref Logical; TRUE, cleans references using clean_ref() function conversion (applicable functions). Default TRUE. See clean_ref() details function .","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/find_ref_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Found or Parsed References to Data Frames — find_ref_to_df","text":"tidy data frame one row per reference, including metadata (author, title, etc...), unique identifiers reference document, complete original reference.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/find_ref_to_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Found or Parsed References to Data Frames — find_ref_to_df","text":"functions convert references found PDF documents parsed text files tidy data frames. find_ref_to_df() utilizes find_ref() function PDFs, parse_ref_to_df() utilizes parse_ref() function text files. find_ref_to_df() analyzes PDF documents extracts references, converting structured data frame. requires 'anystyle' Ruby gem uses 'find' 'parse' features (find_ref() parse_ref() respectively) gather detailed information reference. parse_ref_to_df() works similarly designed text documents. parses structured references text files converts data frame. functions Creates unique identifiers reference within document across entire set documents. id_doc: unique identifier document based position input. id_ref: unique identifier reference within document. combination id_doc reference's row number within document, ensuring reference across documents unique ID.","code":""},{"path":[]},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/find_ref_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Found or Parsed References to Data Frames — find_ref_to_df","text":"","code":"if (FALSE) { # For a PDF document references_df <- find_ref_to_df(input = c(   \"path/to/document1.pdf\",   \"path/to/document2.pdf\" ))  # For a text file references_df <- parse_ref_to_df(input = \"path/to/references.txt\") }"},{"path":[]},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/install_anystyle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install anystyle and anystyle-cli — install_anystyle","text":"","code":"install_anystyle()"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/install_anystyle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install anystyle and anystyle-cli — install_anystyle","text":"Invisible NULL. function called side effects (installing software) rather return value.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/install_anystyle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install anystyle and anystyle-cli — install_anystyle","text":"function installs 'anystyle' 'anystyle-cli' using system's Ruby gem package manager. requires Ruby gem package manager installed system. anystyle fast flexible tool parsing bibliographic references. function executes 'gem install' command 'anystyle' 'anystyle-cli'. requires user necessary permissions install gems system. Ruby gem installed, function fail, need install Ruby first. Ensure Ruby environment properly configured gem can called command line. See details Ruby's installation RubyGems .","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/install_anystyle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install anystyle and anystyle-cli — install_anystyle","text":"","code":"if (FALSE) { install_anystyle() }"},{"path":[]},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/parse_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse bibliographic references using anystyle — parse_ref","text":"","code":"parse_ref(   input = NULL,   path = NULL,   output_format = c(\"bib\", \"json\", \"xml\", \"ref\"),   overwrite = FALSE )"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/parse_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse bibliographic references using anystyle — parse_ref","text":"input Vector file paths text documents containing bibliographic references, single string reference(s). input file, written temporary file parsing. path path parsed file(s) saved. NULL, files saved current working directory. empty, parsed data returned directly saved. output_format Desired output format, one \"bib\", \"json\", \"xml\" \"ref\". \"ref\" text file one reference per line. Default \"json\". overwrite Logical; TRUE, existing files output location overwritten. Default FALSE.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/parse_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse bibliographic references using anystyle — parse_ref","text":"path empty, returns list (single element one input) containing parsed references specified format. path specified, parsed files saved location function returns NULL.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/parse_ref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse bibliographic references using anystyle — parse_ref","text":"function utilizes anystyle Ruby gem parse bibliographic references. segments references (one per line) converts structured formats. input can paths one several text documents containing one full reference per line. character vector element vector containing one full reference.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/parse_ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse bibliographic references using anystyle — parse_ref","text":"","code":"if (FALSE) { # Parse a single reference and return as JSON parse_ref(   input = \"Doe, J. Title of the Article. Journal Name 2020, 13, 123-456.\",   output_format = \"json\" )  # Parse references from a file and save as BibTeX parse_ref(   input = \"path/to/references.txt\", path = \"path/to/output\",   output_format = \"bib\" ) }"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/reorganize_author.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorganize Author Information (Internal) — reorganize_author","title":"Reorganize Author Information (Internal) — reorganize_author","text":"Reorganizes 'author' column reference data frame, combining given, particle, family name components full names. helps standardize author information analysis display.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/reorganize_author.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorganize Author Information (Internal) — reorganize_author","text":"","code":"reorganize_author(data)"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/reorganize_author.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorganize Author Information (Internal) — reorganize_author","text":"data data frame references 'author' column.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/reorganize_author.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorganize Author Information (Internal) — reorganize_author","text":"data frame reorganized author information.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/safely_unnest.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely Unnest Data — safely_unnest","title":"Safely Unnest Data — safely_unnest","text":"helper function used unnest data frames contain list columns, safe (.e., list one element per row).","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/safely_unnest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely Unnest Data — safely_unnest","text":"","code":"safely_unnest(data)"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/safely_unnest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely Unnest Data — safely_unnest","text":"data data frame potentially containing list columns.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/safely_unnest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely Unnest Data — safely_unnest","text":"data frame nested data unnested safe .","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/separate_data_and_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate and Clean Dates and Titles (Internal) — separate_data_and_title","title":"Separate and Clean Dates and Titles (Internal) — separate_data_and_title","text":"Separates primary additional date title information reference data frame performs basic cleaning operations. helps clarify key information reference removes unnecessary characters.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/separate_data_and_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate and Clean Dates and Titles (Internal) — separate_data_and_title","text":"","code":"separate_data_and_title(data)"},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/separate_data_and_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate and Clean Dates and Titles (Internal) — separate_data_and_title","text":"data data frame references 'date' 'title' columns.","code":""},{"path":"https://agoutsmedt.github.io/Ranystyle/reference/separate_data_and_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate and Clean Dates and Titles (Internal) — separate_data_and_title","text":"data frame separated cleaned date title information.","code":""}]
